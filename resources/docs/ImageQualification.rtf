{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red52\green110\blue183;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww25200\viewh16640\viewkind0
\deftab720
\pard\pardeftab720\sa200

\f0\b\fs48 \cf0 Introduction\
\pard\pardeftab720\sl440\sa300

\fs28 \cf2 imageQualification.js
\b0  (
\b iQ.js
\b0 ) gives webpages the ability to load a specific image based on browser width, screen pixel density, and available bandwidth. It detects the specific environment that the webpage is being loaded into and decides which image asset to load on the fly based on a set of defined criteria. For browser widths it works like media queries delivering larger images for desktop, and smaller ones for mobile. It and detects if the user's device is capable of viewing high-resolution images (such as apple's retina displays) and takes into account the user's bandwidth when deciding to support the higher-resolution images. (for instance standard-resolution images will be delivered to mobile devices on slower 3g networks.)\

\b iQ.js
\b0  aims at providing a lightweight, cross-browser tool for a dealing with multiple image sizes due to responsive web design and is influenced by foresight.js, JAIL, and riloadr.js; \
https://github.com/adamdbradley/foresight.js\
https://github.com/sebarmeli/JAIL\
https://github.com/tubalmartin/riloadr
\b\fs48 \cf3 \
\pard\pardeftab720
\cf3 \
\pard\pardeftab720\sa200
\cf0 Features\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls1\ilvl0
\b0\fs28 \cf2 {\listtext	\'95	}Uses standard HTML markup\
{\listtext	\'95	}Default images will load without javascript enabled\
{\listtext	\'95	}Supports both <img> tags and <div> tags with css background images\
{\listtext	\'95	}Mimics @media query breakpoints\
{\listtext	\'95	}Request hi-res images according to device pixel ratio\
{\listtext	\'95	}Estimates network connection speed prior to requesting an image\
{\listtext	\'95	}Only loads images that are viewable in the viewport or within a set range (above or below the "fold")\
{\listtext	\'95	}Allows existing CSS techniques to control an image's dimensions within the browser\
{\listtext	\'95	}Image dimensions set by percents will scale to the parent element's available width\
{\listtext	\'95	}Does not use device detection through user-agents\
{\listtext	\'95	}Allows developers to force certain settings for testing purposes\
{\listtext	\'95	}By default does not respond to browser resizing on desktop (ie once a desktop asset is loaded it stays loaded)\
{\listtext	\'95	}Responds to device orientation chanes (ie if a tablet shows 'tablet' layout for portrait, and 'desktop' layout for landscape images may re-load as needed)\
{\listtext	\'95	}Allows specific images to not support high-resolution graphics\
{\listtext	\'95	}Allows specific images to exist in different base directories or alternate server locations\
{\listtext	\'95	}Uses a template naming scheme to allow changes to the folder structure or file naming convention\
{\listtext	\'95	}Minifies to >= 10K\
\pard\pardeftab720

\b\fs48 \cf3 \
\pard\pardeftab720\sa200
\cf0 Demos\
\pard\pardeftab720\sl440\sa300

\b0\fs28 \cf2 Before we get too far into the nitty-gritty, it's probably best to view 
\b iQ.js
\b0  in action. Currently most desktop and laptops do not have high-resolution displays and are limited to a device pixel ratio of only 1, so you will not be able to see the effects on a standard monitor. Make sure you view the demos from multiple devices, such as your mobile phone, tablet and traditional computer. \
\pard\pardeftab720\li715\fi3\sl440\sa300

\b\fs32 \cf2 \ul \ulc2 !! Note
\b0\fs28 \ulnone : iQ has the ability to load a new image due to screen resizing, however by default this option is disabled as it is not the most optimized way load pages. With image reloading turned off, 
\b \cf2 iQ.js DOES NOT
\b0 \cf2  make multiple requests for the same image, it makes a single request for the exact right image based on the browsers width, pixel ratio and network connection speed. So, if you are on a desk top and have your browser at a normal width and load the demo, 
\b \cf2 iQ.js
\b0 \cf2  will load in the appropriate image for the window size. Because our site is responsive, the image will scale when you resize your window to match the set break points, but it will NOT load in multiple replacement images at the different break points. To test 
\b \cf2 iQ.js
\b0 \cf2  against different device sizes in the browser, simply set the browser to the desired width and hit reload. \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl440\sa300
\ls2\ilvl1\cf2 {\listtext	\uc0\u8259 	}
\b \cf2 iQ.js Demo Link
\b0 \cf2 \
\pard\pardeftab720

\b\fs48 \cf3 \
\pard\pardeftab720\sa200
\cf0 Approach Details\
\pard\pardeftab720\sl440\sa300

\b0\fs28 \cf2 One of the largest problems faced with dynamically deciding image quality is that by the time javascript is capable of viewing an 
\i img
\i0  in the DOM, the image file has already been requested from the server. And on the flip side, if 
\i img
\i0  elements are built by javascript then search engines probably won't view them and browsers without javascript enabled will also not be able to view the images. To overcome both of these challenges iQ.js uses the img element without a set src attribute and provides a fallback image for browsers that don't support javascript. Therefore we can leverage javascript to do the smart image loading after the DOM has loaded without loading unnecessary images, and still provide images to browsers that don't utilize javascript. Some search engine crawler bots actually do support javascript and will find our dynamically loaded images , however having that fallback image gives us the best chance that our images will be picked up. Also having the standard img included in the dom allows us to include the alt tag needed for usability compliance. \
\pard\pardeftab720\sl440\sa300

\b\fs48 \cf3 \
\pard\pardeftab720\sa200
\cf0 High-Speed Network Connection Test\
\pard\pardeftab720\sl440\sa300

\b0\fs28 \cf2 Currently most devices capable of hi-res displays are mobile devices, such as new iPhones or iPads. However, since they are "mobile" in nature and their data may be relying on cell towers, even if the device has a hi-res display, users with slow connectivity probably do not want to wait a long time while images download. In these cases, iQ.js does a quick network speed test to make sure the user's device can handle hi-res images. Additionally, it stores the devices network connection speed information for 30 minutes (or is customizable to any expiration period you'd like) so it does not continually perform speed tests. The speed test requires hosting of a small (50k) image that is downloaded and timed. This happens before the other images are loaded and adds a hopefully very short delay to the image loading.\

\b Other speed test notes:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls3\ilvl0\cf2 {\listtext	\'95	}If the response takes longer than it "should" take to download the test file, then iQ.js will not wait any longer on the test response and automatically consider the connection "slow"\
{\listtext	\'95	}If the device has a pixel ratio of 
\i 1
\i0 , then the display in unable to view hi-res anyways. In these cases (which is just about all traditional computers at the moment), it doesn't bother doing a speed test because it already knows its a waste of time since the display can't view hi-res.\
{\listtext	\'95	}If the device implements 
\i navigator.connection.type
\i0 , and the known connection type is either 
\i 2g
\i0  or 
\i 3g
\i0 , then it doesn't bother doing the speed test since it already knows its too slow. 
\i Android currently seems to be the only one implementing navigator.connection.type, and even then it may not always have the info (but when it does the info save us time, and for 2g that's pretty valuable info).\
\ls3\ilvl0
\i0 {\listtext	\'95	}There are some interesting examples out there that show that high-resolution images can actually look better and be smaller file weight than their standard-resolution counterparts, by using higher levels of jpeg compression the file sizes are reduced, on standard-resolution images the 'noise' would be very undesirable visually, however with the higher resolution images the effect is much less noticable due to the high pixel density. We will take this research into account when coming up with our best practices for image exporting. \
\pard\pardeftab720

\b\fs48 \cf3 \
\pard\pardeftab720\sa200
\cf0 CSS \
\pard\pardeftab720\sl440\sa300

\fs28 \cf2 Pete - need your input here!
\b0 \
\pard\pardeftab720

\b\fs48 \cf3 \
\pard\pardeftab720\sa200
\cf0 iQ.js Options\
\pard\pardeftab720

\f1\b0\fs22 \cf0 base: 'img/', //root file path to the image directory (relative or absolute server path) \
testConn : true, //you can opt out of speed testing\
minKbps: 500, //this is the speed required for high-resolution images to load\
speedTestUri: // you can change the location of the image to do the speed testing against default is 'img/speed-test/50k'\
speedTestKB : // you can change the size of the speed test image (default is 50k)\
speedTestExpireMinutes: 60, //this is how long the speed test value is stored before the test is re-run\
minDevicePixelRatio: 2, // this is smallest value for device pixel ratio that is used for 'high-resolution' images (apple retina is 2 some android devices are 1.5 1.7 etc)\
highResPathSuffix: '@2x', //this is the string to insert into the \{highRes\} path template location \
jquerySelector: '.iq-img', //\ul jquery\ulnone  selector to select which elements iQ will handle\
pathTemplate: '\{fileName\}-\{breakpoint\}\{highRes\}.\{ext\}', //this is the template that gets parsed into the appropriate file path. \{fileName\} and \{ext\} are pulled from the data-src attribute. \{highRes\} is determined by bandwidth, device capability, etc and may or may not be included in the output. \{breakpoint\} is determined by the browser width and the breakpoint names defined below.\
asyncDistance: 500, // this determines the distance from the viewport for which images are loaded. 0 loads only visible images, -1 loads all the images on the page, positive integers add a padding above and below the viewport to load images that could soon scroll into view. \
updateOnResize: false, //if true additional listeners will be added to the window on resize and will load new images as the browser resizes\
onLoad: null, //optional \ul callbacks\ulnone \
onError: null, \
breakpoints :  [\
	\{name: 'phone',      maxWidth: 480\},\
	\{name: 'tablet',     minWidth: 481, maxWidth: 960\},\
	\{name: 'desktop',    minWidth: 961\},], // array of names and media query style width qualifiers for breakpoint settings \
forceHighRes: false // optional value to force 2x images for developer testing
\f0\fs28 \
\pard\pardeftab720

\b\fs48 \cf3 \
\pard\pardeftab720\sa200
\cf0 HTML Markup\
\pard\pardeftab720\sl440\sa300

\b0\fs28 \cf2 There are 3 important components to the HTML markup. The data-src, the class name, and the noscript fallback markup. \
The data-src attribute is the base filename of the image. When the pathTemplate is parsed the file name and file extension are extracted from the data-src and applied to the template formatting. For example with the default pathTemplate : 
\f1\fs22 \cf0 '\{fileName\}-\{breakpoint\}\{highRes\}.\{ext\}' 
\f0\fs28 \cf2 a data-src value of 
\b "sony-camera.jpg" 
\b0 would be turned into something like 
\b sony-camera-desktop@2x.jpg 
\b0 or 
\b sony-camera-tablet.jpg 
\b0 (depending on the breakpoint naming convention and optional high-resolution suffix settings.) \
The class name could be anything and is technically optional, however the default is 'iq-img'. The jquerySelector property in the options allows a full jQuery selector property to be used to select which images to apply the code functionality to, so you could just as easily set that value to any valid selector that identifies just the images you wish to include. We recommend using a class name attribute. \
The noscript tag and nested image are the fallback settings. We recommend using the standard-resolution desktop image as the fallback. \
Example <img> markup:
\b \
\pard\pardeftab720
\cf2 <img class="iq-img" alt="sony camera" data-src="sony-camera.jpg">\
<noscript>\
  <img src="img/sony-camera-desktop.jpg">\
</noscript>\
\pard\pardeftab720\sl440\sa300

\b0 \cf2 \
Example <div> markup:\
\pard\pardeftab720

\b \cf2 <div class="iq-img" data-src="sony-camera.jpg"></div>
\b0 \cf2 \
\pard\pardeftab720\sl440\sa300
\cf2 \
There are some additional overrides as well: \
\pard\pardeftab720\sl440\sa300
\cf2 Adding a class of 'no-2x' to the dom element will exclude the image from being a candidate for high-resolution image replacement. If that class is present it will only use the breakpoint settings for standard-resolution images.\
Adding a data-base="path_to_image_directory/" attribute will override the standard base, this is helpful if you want some images to be pulled from a different server location but still be handled by the iQ code.\
\pard\pardeftab720

\b\fs48 \cf3 \
\pard\pardeftab720\sa200
\cf0 iQ.js Methods\
\pard\pardeftab720\sl440\sa300

\fs28 \cf2 Pete - need your input here!\
\pard\pardeftab720

\fs48 \cf3 \
\pard\pardeftab720\sa200
\cf0 Testing\
\pard\pardeftab720\sl440\sa300

\b0\fs28 \cf2 iQ's goal is to work on the major browsers, both desktop and mobile. Below are the primary browsers iQ.js has been tested against.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440
\ls4\ilvl0\cf2 {\listtext	\'95	}iOS 5.1 (iPad3 & iPhone4)\
{\listtext	\'95	}Android 2.3 \
{\listtext	\'95	}Chrome 17 (Mac)\
{\listtext	\'95	}Chrome 20 (Win)\
{\listtext	\'95	}Safari 5.1 (Mac)\
{\listtext	\'95	}Firefox 3.6 (Mac)\
{\listtext	\'95	}Firefox 12 (Mac)\
{\listtext	\'95	}Firefox 10 (Win)\
{\listtext	\'95	}IE8 / IE7\
\pard\pardeftab720\sl440\sa300
\cf2 \
\pard\pardeftab720

\b\fs48 \cf3 \
\
}