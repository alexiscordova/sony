@import "../../../common/css/_base/variables";
@import "../../../common/css/_base/mixins";

$bgMaxWidth: 1110px;
$bgHeight: 540px;
$bgCropHeight: $bgHeight;
$maxPieces: 11;
$calloutPieceNumber: 2;
$pieceWidth: 130px;
$pieceHeight: 220px;
$piecesOffsetTop: 140px;
$piecesOffsetRight: 134px;
$buttonInnerDiameter: 72px;
$buttonBorder: 12px;
$buttonOuterDiameter: $buttonInnerDiameter + ( 2 * $buttonBorder );
$buttonHoverShift: 48px;
$easeInCubic: cubic-bezier(0.550, 0.055, 0.675, 0.190);

// The distance between each piece in the exploded state
$pieceExplosionStep: 7.2%;

// The distance between each piece in the tease state
$pieceTeaseStep: 0.4%;

.exploded-view {

  padding: 0 0 75px;

  .scene, .scene-elements {
    position: relative;
  }

  .center {
    text-align: center;
  }

  .csstransitions & .scene {
    opacity: 0;
    @include transition( opacity $transitionFast $easeNormal );

    &.in {
      opacity: 1;
    }
  }

  .submodule > .image-module {
    height: $bgCropHeight;
    @include background-size( auto $bgHeight );
    background-repeat: no-repeat;
    background-position: right top;
  }

  &.full-inner {
    position: relative;
  }

  .inner {
    height: 100%;
    position: absolute;
    top: 0;
    right: 0;
    left: 0;

    .grid,
    .grid > div,
    .table-center-wrap {
      height: 100%;
    }

  }

  .box {
    padding: 50px;
  }

  .title {

    h2 {
      font-size: 2.75em;
    }

    p {
      color: $gray20;
      font-size: 1.125em;
      margin-bottom: 0;
    }
  }

  .csstransitions & .detail {
    opacity: 0;
    @include transition( opacity $transitionSuperslow $easeNormal );

    &.in {
      opacity: 1;
    }
  }

  .no-csstransitions & .detail {
    display: none;

    &.in {
      display: block;
    }
  }

  .detail {

    .box {
      width: 100%;
      height: auto;
      position: absolute;
      bottom: 0;
      padding: 30px 0;
    }
    
    .grid {
      height: auto;
    }

    p {
      color: $gray40;
    }

  }

  .csstransitions & .box {
    opacity: 1;
    @include transition( opacity $transitionSuperslow $easeNormal );

    &.out {
      opacity: 0;
    }
  }

  .no-csstransitions & .box {
    display: block;

    &.out {
      display: none;
    }
  }

  .pieces-container {
    overflow: hidden;
  }

  .pieces {
    height: $pieceHeight;
    position: relative;
    top: $piecesOffsetTop;
    margin-right: $piecesOffsetRight;
  }

  .callout {
    z-index: $maxPieces;
    width: 430px;
    height: 86px;
    text-align: right;
    position: absolute;
    right: $calloutPieceNumber * $pieceExplosionStep;
    top: 88px;
    margin-right: $piecesOffsetRight + ( $pieceWidth / 2 ) - 20px;
    padding-right: 20px;
    border-right: solid 1px $white;

    h3, p {
      color: $white;
    }

    h3 {
      margin-top: -13px; // pull up to align with callout border
    }
  }

  .csstransitions & .callout {
    opacity: 0;
    @include transition( opacity $transitionSuperslow $easeNormal );

    &.in {
      opacity: 1;
    }
  }

  .no-csstransitions & .callout {
    display: none;

    &.in {
      display: block;
    }
  }

  .cta {
    position: absolute;
    right: $piecesOffsetRight - ( $buttonOuterDiameter / 2 ) + 20px;
    top: ( $pieceHeight / 2 ) - ( $buttonOuterDiameter / 2 );
    z-index: $maxPieces + 1;
    width: $buttonOuterDiameter + $buttonHoverShift;
    height: $buttonOuterDiameter;
    opacity: 1;

    &:active {
      background-color: transparent;
    }

    .circle-btn {
      position: absolute;
      right: 0;
      width: $buttonOuterDiameter;
      height: $buttonOuterDiameter;
      @include border-radius( $buttonOuterDiameter / 2 );
      background: rgba( 0, 0, 0, 0.2);

      &.expand {
        display: block;
      }

      &.collapse {
        display: none;
      }
    }

    i {
      background: $buttonOrange;
      color: $white;
      width: $buttonInnerDiameter;
      height: $buttonInnerDiameter;
      @include border-radius( $buttonInnerDiameter / 2 );
      margin: $buttonBorder;
      font-size: 2em;
      line-height: 1.9em;
      text-align: center;

      &.fonticon-10-chevron-reverse {
        padding-right: 6px;
      }

      &.fonticon-10-chevron {
        padding-left: 6px;
      }
    }

    &.collapse {
      width: $buttonOuterDiameter;
      right: $maxPieces * $pieceExplosionStep;
      margin-right: 20px;

      .circle-btn {

        i {
          background-color: rgb( 160, 160, 160 );
        }
      }

      display: none;
      &.open {
        display: block;
      }
    }

    &.open.expand {
      display: none;
    }

    @include transition( opacity $transitionSlower $easeOutQuad );
    &.out {
      opacity: 0;
    }

    outline: none;
    &:active {
      outline: none;
    }

  }

  .no-touch & .cta {

    &.expand {
      &:hover {
        .circle-btn {
          right: $buttonHoverShift;

          i {
            background-color: $buttonOrangeHover;
          }
        }
      }
    }
    &.open {
      &.collapse {
        &:hover {
          .circle-btn {
            right: 0;

            i {
              background-color: rgb( 180, 180, 180 );
            }
          }
        }
      }
    }
  }

  .piece {
    width: $pieceWidth;
    height: $pieceHeight;
    position: absolute;
    top: 0;
    right: 0;
    background-position: 0 0;

    // The transition properties used when collapsing the exploded elements
    @include transition( right 0.8s $easeInCubic );

    &.exploded {
      // The transition properties used when expanding the exploded elements
      @include transition( right 0.8s $easeOutQuart );
    }

    &.quick {
      // The transition properties used to do quick expand or collapse of the elements
      @include transition( none );
    }

  }

  @for $i from 0 through $maxPieces {
    .piece-#{$i} {
      background-position: ( -$pieceWidth * $i ) 0;
      z-index: $maxPieces - $i;

      @if $i != 0 { 
        &.tease {
          right: ( $maxPieces - $i - 1 ) * $pieceTeaseStep;
        }
        &.exploded {
          right: ( $maxPieces - $i - 1 ) * $pieceExplosionStep;
          opacity: 1;
        }
      }
    }
  }

  @for $i from 0 through $maxPieces {
    @if $i > 1 {
      // hide pieces between the cap and the callout piece when teasing
      @if $i < $maxPieces - $calloutPieceNumber - 1 {
        .piece-#{$i} {
          &.tease {
            opacity: 0;
          }
        }
      }
    }
  }

  .piece-1 {
    // the collapsed cap piece needs an extra margin to be positioned correctly
    margin-right: 20px;

    &.perspective {
      background-position: ( -$pieceWidth * ( $maxPieces - 1 ) ) 0;
    }
  }

}