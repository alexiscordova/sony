//- single line mixin for partials
//- +partial('example.html.jade', 'example/default.json')

mixin partial(m, d, isSubmodule)
  if ( m && d && m != true && d != true )
    data = locals.data(d)
    if isSubmodule
      - data.isSubmodule = true
    e = {"locals":locals, "data":data}
    !{locals.partial('packages/modules/' + m, e)}


mixin includeCSS(moduleName)
  e = {"locals": locals}
  if (!e.locals.modulescss)
    - e.locals.modulescss = []
  if(e.locals.modulescss)
    if (e.locals.modulescss.indexOf(moduleName) == -1)
      - e.locals.modulescss.push(moduleName)


mixin includeJavascriptModule(moduleName)
  e = {"locals":locals}
  if ( !e.locals.javascriptModules )
    - e.locals.javascriptModules = []
  if ( e.locals.javascriptModules )
    if ( e.locals.javascriptModules.indexOf(moduleName) == -1 )
      - e.locals.javascriptModules.push(moduleName)


//- @param {array} classes an array of strings which will become classes on the main element
//- Use this mixin at the start of all your modules as the first element.
//- See editorial-slideshows-e4.jade for a good example of default usage
//- or php-slideshow-d4.jade for an example of submodule usage
mixin mainElement( classes )
  moduleId = data.id ? data.id : false
  isSubmodule = data.isSubmodule
  classes = classes && classes.length ? classes : false

  if isSubmodule
    //- If this is a submodule, the id should already be on the main module
    div(class=classes)
      block
  else
    section(id=moduleId, class=classes)
      block


//- img - an object with at least: `src`, `alt`, `noscriptsrc`
//- [extraClasses] - a string containing any extra classes to put on the img element
//- [itemprop] - optional itemprop attibute (should be 'image' if used).
mixin iQImage( img, extraClasses, itemprop, isBackgroundImage )

  //- Stop the build process from breaking on undefined images
  //- Hopefully you'll be able to find your broken image on the page!
  if !img
    div(style="overflow:hidden;", class=extraClasses)
      p.l3(style="color:red;margin:0") Missing image data!
      p.l3(style="color:red;margin:0") !{ 'img = ' + JSON.stringify( img ) }
  else
    classes = 'iq-img'
    extraClasses = extraClasses ? extraClasses : false
    itemprop = itemprop ? itemprop : false
    if extraClasses
      - classes += ' ' + extraClasses

    if isBackgroundImage
      div(class=classes, data-src-desktop=img.srcDesktop, data-src-tablet=img.srcTablet, data-src-phone=img.srcPhone, data-src-desktop-highres=img.srcDesktopHighRes, data-src-tablet-highres=img.srcTabletHighRes, data-src-phone-highres=img.srcPhoneHighRes)
    else
      img(class=classes, alt=img.alt, itemprop=itemprop, data-src-desktop=img.srcDesktop, data-src-tablet=img.srcTablet, data-src-phone=img.srcPhone, data-src-desktop-highres=img.srcDesktopHighRes, data-src-tablet-highres=img.srcTabletHighRes, data-src-phone-highres=img.srcPhoneHighRes)
      noscript
        img(class=extraClasses, src=img.noscriptSrc, alt=img.alt, itemprop=itemprop)


//- Shortcut for background images using iQ
mixin iQBackgroundImage( img, extraClasses )
  +iQImage( img, extraClasses, false, true )


//- Mixin for videos
mixin sonyVideo ( videoData, extraClasses )
  classes = [ 'player', 'is-splash', 'no-time', 'play-button' ]

  if extraClasses
    - classes.push( extraClasses )

  if !videoData
    p.l3(style='color:red;') Missing Video data!

  else
    //- add more domain keys here if necessary don't forget to concatenate
    - sonyKey = '$343124831096460,'
    - odopodKey = '$421601038208546'
    - allDomainKeys = sonyKey + odopodKey
    - isIQPoster  = videoData.poster ? true : false
    if isIQPoster
      - classes.push( 'iq-img', 'update-always' )
      div(class=classes, data-fallback-src=videoData.mp4, data-key=allDomainKeys, data-ratio=videoData.ratio, data-src-desktop=videoData.poster.srcDesktop, data-src-tablet=videoData.poster.srcTablet, data-src-phone=videoData.poster.srcPhone, data-src-desktop-highres=videoData.poster.srcDesktopHighRes, data-src-tablet-highres=videoData.poster.srcTabletHighRes, data-src-phone-highres=videoData.poster.srcPhoneHighRes)
       video(preload='none')
        source(type='video/mp4',  src=videoData.mp4)
        source(type='video/flash',src=videoData.mp4)
    else
      div(class=classes, data-fallback-src=videoData.mp4, data-key=allDomainKeys, data-ratio=videoData.ratio)
       video(preload='none')
        source(type='video/mp4',  src=videoData.mp4)
        source(type='video/flash',src=videoData.mp4)


//- To be used with bootstrap's dropdown
//- @param {Array} socialButtons an array of social button objects
//-     each object has an `icon`, `title`, `id`, `text`, and optionally `target`
//- @param {String} shortLink link to share
//- @param {Boolean} addCloseButton if true, will add a close button for
//-     when the share menu is used as a modal
mixin shareMenu( socialButtons, shortLink, addCloseButton )
  //- Default to false
  addCloseButton = addCloseButton == true

  ul.dropdown-menu.dropdown-menu-alt.share-menu.pull-right(role="menu")
    if addCloseButton
      button.box-close.box-close-small(data-dismiss="modal", aria-hidden="true")
        i.fonticon-10-x
    each social in socialButtons
      li
        a(href=social.href, title=social.title ? social.title : social.text, target=social.target ? social.target : false)
          span.social-icon(class=social.id + '-background-color')
            i(class=social.icon)
          span.social-label.p3 !{ social.text }
    li.input-holder
      span.link-icon.js-no-close
        i.fonticon-15-link.js-no-close
      input.p4(type="text", value=shortLink)


//- @param {Object}  linkObj       a link object with `text`, `href`, `title`, and optionally `target`
//- @param {Array}   [classes]     an array of strings which will become the classes on the `<a>`
//- @param {String}  [icon]        class name for an icon if desired
//- @param {Boolean} [iconBefore]  If true, places the font icon before the link text
//- @param {Boolean} [noText]      If true, the linkObject.text will not be output
mixin link( linkObj, classes, icon, iconBefore, noText )
  if linkObj
    classes = classes ? classes : false
    //- text should default to something if it's undefined or null, but if it's false, don't output any text
    text = linkObj.text != null ? linkObj.text : "linkObj.text"
    if noText
      text = false
    //- Default the title to the link text if title is missing. If text is false, use the link object's text
    title = linkObj.title ? linkObj.title : text ? text : linkObj.text
    href = linkObj.href ? linkObj.href : "#HREF_MISSING"
    //- If target is missing or empty, default it to false, which won't output the attribute
    target = linkObj.target ? linkObj.target : false

    a(class=classes, title=title, href=href, target=target)
      if icon
        if iconBefore
          i(class=icon)
          if text
            !{ text }
        else
          if text
            !{ text }
          i(class=icon)
      else if text
        !{ text }

      block
  else
    a(style="color:red")
      span link object undefined!
      block


//- Link with a chevron
//- @param {Object} link object
mixin breadcrumbLink( obj )
  +link( obj, [ "l3", "breadcrumb-link" ], "fonticon-10-chevron-reverse", true )


//- Creates an unordered list of links which are used for in page navigation (likely a sticky nav)
//- Used in Single/Multi spec pages and the product summary
//- @param {Array} links array of link objects
//- @param {Boolean} [isInStickyNav] optional. Adds tabindex="-1" and an extra class
mixin jumpLinks( links, isInStickyNav )
  ulClasses = [ "jump-links", "inline" ]

  //- Use tabindex="-1" for links in sticky nav
  hideFromTabIndex = isInStickyNav ? "-1" : false

  if isInStickyNav
    - ulClasses.push( "nav" )

  if links
    ul(class=ulClasses)
      each link, i in links
        //- Add active to the first link
        clss = i ? false : 'active'
        li(class=clss)
          a.lt3.no-hover-transition(href=link.href, tabindex=hideFromTabIndex) !{ link.text }


blocks = {};
mixin defineBlock(name)
  block
  len = buf.length;
  - buf.push('');
  - blocks[name] = len;
mixin appendBlock(name)
  start = buf.length;
  block
  - buf[blocks[name]] += buf.splice(start, buf.length - start).join('');


mixin scrollToTop()
  .scroll-to-top.container.full-bleed.opacity0
      a(href="#")
        i.fonticon-10-back-to-top


//- Used when generated docs
mixin docsLinks( listName, suffix, exclude )
  //- Not sure why `locals` can only be used inside a mixin
  list = locals[ listName ]()
  href = locals.getDocsHref()
  lastPageTitle = null

  if exclude
    - list.splice( list.indexOf( exclude ), 1 )

  //- Sort alphabetically, regardless of case
  - list.sort( function(a, b) { codea = a.match(/\b[a-z]{1}[0-9]{1,2}\b/); a = codea ? codea[0] :a; codeb = b.match(/\b[a-z]{1}[0-9]{1,2}\b/); b = codeb ? codeb[0] :b; if (a.toLowerCase() < b.toLowerCase()) return -1; if (a.toLowerCase() > b.toLowerCase()) return 1; return 0; })

  each name in list
    title = name.replace(/.html/g, '').replace(/-/g, ' ').replace(/_/g, '.').replace(' ' + suffix, '')
     //- this moves the a## to the front of the word
    codes = title.match(/\b[a-z]{1}[0-9]{1,2}\b/g);
    if codes != null
      title = title.replace(/\s[a-z]{1}[0-9]{1,2}\b/g, '');
      title = codes.join(' ') + ' ' + title;

    prefix = title.match(/^[a-z]{1}[0-9]/) ? title.substring( 0, 1 ) : title.match(/^\w+/)[0]
    if lastprefix != null && lastprefix != prefix
      hr
    a( href = href + name, title=title) !{ title }
    lastprefix = prefix
    //- this replaces underscores with dots for the numbered pages


