//- single line mixin for partials
//- +partial('example.html.jade', 'example/default.json')

mixin partial(m, d)
  e = {"locals":locals, "data":locals.data(d)}
  !{locals.partial('packages/modules/' + m, e)}

mixin includeCSS(moduleName)
  e = {"locals": locals}
  if (!e.locals.modulescss)
    - e.locals.modulescss = []
  if(e.locals.modulescss)
    if (e.locals.modulescss.indexOf(moduleName) === -1)
      - e.locals.modulescss.push(moduleName)

mixin includeJavascriptModule(moduleName)
  e = {"locals":locals}
  if ( !e.locals.javascriptModules )
    - e.locals.javascriptModules = []
  if ( e.locals.javascriptModules )
    if ( e.locals.javascriptModules.indexOf(moduleName) === -1 )
      - e.locals.javascriptModules.push(moduleName)

//- img - an object with at least: `src`, `alt`, `noscriptsrc`
//- [extraClasses] - a string containing any extra classes to put on the img element
//- [itemprop] - optional itemprop attibute (should be 'image' if used).
mixin iQImage( img, extraClasses, itemprop )

  //- Stop the build process from breaking on undefined images
  //- Hopefully you'll be able to find your broken image on the page!
  if !img
    p.l3(style="color:red;") Missing image data!
  else
    - classes = 'iq-img'
    - extraClasses = extraClasses || false
    - itemprop = itemprop || false
    - if ( extraClasses ) classes += ' ' + extraClasses
    img(class=classes, data-src-desktop=img.srcDesktop, data-src-tablet=img.srcTablet, data-src-phone=img.srcPhone, data-src-desktop-highres=img.srcDesktopHighRes, data-src-tablet-highres=img.srcTabletHighRes, data-src-phone-highres=img.srcPhoneHighRes, alt=img.alt, itemprop=itemprop)
    noscript
      img(class=extraClasses, src=img.noscriptsrc, alt=img.alt, itemprop=itemprop)

//- Mixin for videos
mixin sonyVideo ( videoData )
  if !videoData
    p.l3(style='color:red;') Missing Video data!
  else
    div(class='player' , data-key='$421601038208546' , data-ratio=videoData.ratio)
     video(preload='none')
      source(type='video/webm', src=videoData.webm.srcDesktop)
      source(type='video/mp4',  src=videoData.mp4.srcDesktop)
      source(type='video/ogg',  src=videoData.ogg.srcDesktop)

//-is anyone using this? we can probably dump it, seems everyone needed much more specific control over their headers.. -ps
//- +1 to dump it - gc

//- hgobject is an object with potential h# items and their text values
//- for instance {"h2": "this is a h2", "h3": "this is a h3" }
//- h#class is optional classes to add to the h if it finds one
//- it will only add h#'s that exist or add classes that are defined
//- if you pass it nothing it assumes data as the hgobject so if h#'s are defined in the top level of your json it picks them up
//- ie: +hgroup()   or     +hgroup(someobject, "", "t3", "l1", "l2", "myclass")
mixin hgroup (hgobject, h1class, h2class, h3class, h4class, h5class, h6class)
  - hgobject = hgobject || data
  - h1class = h1class || ""
  - h2class = h2class || ""
  - h3class = h3class || ""
  - h4class = h4class || ""
  - h5class = h5class || ""
  - h6class = h6class || ""
  .hgroup
    if hgobject.h1
      h1(class= h1class) !{hgobject.h1}
    if hgobject.h2
      h2(class= h2class) !{hgobject.h2}
    if hgobject.h3
      h3(class= h3class) !{hgobject.h3}
    if hgobject.h4
      h4(class= h4class) !{hgobject.h4}
    if hgobject.h5
      h5(class= h5class) !{hgobject.h5}
    if hgobject.h6
      h6(class= h6class) !{hgobject.h6}


//- To be used with bootstrap's dropdown
mixin shareMenu( socialButtons, shortLink, addCloseButton )
  //- Default to false
  addCloseButton = addCloseButton === true

  ul.dropdown-menu.dropdown-menu-alt.share-menu.pull-right(role="menu")
    if addCloseButton
      button.box-close.box-close-small(data-dismiss="modal", aria-hidden="true")
        i.fonticon-10-x
    each social in socialButtons
      li
        a(href=social.link)
          span.social-icon(class=social.id + '-background-color')
            i(class=social.icon)
          span.social-label.p3= social.label
    li.input-holder
      span.link-icon.ghost-center-wrap.js-no-close
        i.fonticon-10-link.ghost-center.js-no-close
      input.p4(type="text", value=shortLink)


- var blocks = {};
mixin defineBlock(name)
  block
  - var i = buf.length;
  - buf.push('');
  - blocks[name] = i;
mixin appendBlock(name)
  - var start = buf.length;
  block
  - buf[blocks[name]] += buf.splice(start, buf.length - start).join('');

