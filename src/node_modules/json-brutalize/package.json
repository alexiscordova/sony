{
  "name": "json-brutalize",
  "description": "Tool for generating JSON variations given a fully-populated starting point.",
  "version": "0.0.3",
  "homepage": "https://github.com/gcpantazis/json-brutalize",
  "author": {
    "name": "George Pantazis",
    "email": "gcpantazis@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gcpantazis/json-brutalize.git"
  },
  "bugs": {
    "url": "https://github.com/gcpantazis/json-brutalize/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/gcpantazis/json-brutalize/blob/master/LICENSE-MIT"
    }
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.6.14"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "underscore": ">=1.4.x"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.2.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-internal": "~0.4.2",
    "grunt": "~0.4.0"
  },
  "readme": "#JSON Brutalize [![Build Status](https://api.travis-ci.org/gcpantazis/json-brutalize.png?branch=master)](http://travis-ci.org/gcpantazis/json-brutalize)\n\nProvided a fully-populated JSON object, Brutalize will generate an array of possible variations to that object. Useful for hardening your templates against potentially volitile API data.\n\nUsage\n-----\n\n**Install:**\n\n      npm install json-brutalize\n\n**Methods:**\n\n* `generate(JSON, depth, typeCheck)`\n  * `JSON`: The fully-populated JSON object to generate variations against.\n  * `depth`: *(optional)* The maximum number of decendents `generate` will attempt to delete. If omitted, will attempt the maximum number of variations (equal to the number of endpoints in `JSON`).\n  * `typeCheck`: *(optional)* generates clones where elements are replaced by different types of [valid JSON objects](http://www.json.org/).\n\n**Example:**\n\n      var fixture = {\n        \"foo\": \"bar\",\n        \"baz\": {\n          \"a\": 1,\n          \"b\": 2\n        }\n      };\n\n      var Brutalize = require('json-brutalize');\n\n      var output = Brutalize.generate(fixture, 1); // Returns array of length 5.\n      var output2 = Brutalize.generate(fixture, 2); // Returns array of length 9.\n      var output3 = Brutalize.generate(fixture); // All possible variations of `fixture`. Returns array of length 10.\n      var output4 = Brutalize.generate(fixture, 2, true); // Returns array of length 179.\n\n\n**TODO:**\n\n* It's easy for the process to max out RAM, particulary for very complicated JSON files with a depth > 1. In lieu of a \"real\" solution for this, I should at least let the generator close down if it becomes sufficiently slow, and perhaps randomize the output between depths so that you can at least get a random sampling.\n* Per the above, it might make more sense to set a \"max tests\" option.\n\nLicense\n-------\nCopyright (c) 2013 George Pantazis\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "json-brutalize@0.0.3",
  "_from": "json-brutalize@"
}
