// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

module.exports = function(BasePlugin) {
  var PartialsPlugin, balUtil, pathUtil;
  balUtil = require('bal-util');
  pathUtil = require('path');
  return PartialsPlugin = (function(_super) {

    __extends(PartialsPlugin, _super);

    PartialsPlugin.prototype.name = 'partials';

    PartialsPlugin.prototype.config = {
      partialsPath: 'partials'
    };

    PartialsPlugin.prototype.foundPartials = null;

    function PartialsPlugin() {
      var config, docpad;
      PartialsPlugin.__super__.constructor.apply(this, arguments);
      docpad = this.docpad;
      config = this.config;
      config.partialsPath = pathUtil.resolve(docpad.config.srcPath, config.partialsPath);
      this.foundPartials = {};
    }

    PartialsPlugin.prototype.renderPartialSync = function(name, data) {
      var config, id, partial;
      config = this.config;
      id = Math.random();
      partial = {
        id: id,
        name: name,
        data: data,
        path: pathUtil.join(config.partialsPath, name),
        container: "[partial:" + id + "]"
      };
      this.foundPartials[id] = partial;
      return partial.container;
    };

    PartialsPlugin.prototype.renderPartial = function(partial, next) {
      var docpad;
      docpad = this.docpad;
      balUtil.exists(partial.path, function(exists) {
        var err;
        if (!exists) {
          err = new Error("The partial [" + partial.name + "] was not found, and as such will not be rendered.");
          if (err) {
            return next(err);
          }
        }
        return docpad.renderPath(partial.path, {
          templateData: partial.data
        }, next);
      });
      return this;
    };

    PartialsPlugin.prototype.extendTemplateData = function(_arg) {
      var me, templateData;
      templateData = _arg.templateData;
      me = this;
      templateData.partial = function() {
        var data, name, objs, _ref;
        name = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (objs.length >= 2) {
          objs.unshift({});
          data = balUtil.shallowExtendPlainObjects.apply(balUtil, objs);
        } else {
          data = (_ref = objs[0]) != null ? _ref : {};
        }
        return me.renderPartialSync(name, data);
      };
      return this;
    };

    PartialsPlugin.prototype.renderDocument = function(opts, next) {
      var config, docpad, file, foundPartials, me, tasks, templateData;
      templateData = opts.templateData, file = opts.file;
      me = this;
      docpad = this.docpad;
      config = this.config;
      foundPartials = this.foundPartials;
      tasks = new balUtil.Group(next);
      balUtil.each(foundPartials, function(partial) {
        return tasks.push(function(complete) {
          if (opts.content.indexOf(partial.container) === -1) {
            return complete();
          }
          docpad.log('debug', "Rendering partial: " + partial.name);
          return me.renderPartial(partial, function(err, contentRendered) {
            if (err) {
              docpad.warn("Rendering partial failed: " + partial.name + ". The error follows:", err);
            } else {
              docpad.log('debug', "Rendered partial: " + partial.name);
              opts.content = opts.content.replace(partial.container, contentRendered);
            }
            return complete();
          });
        });
      });
      tasks.async();
      return this;
    };

    PartialsPlugin.prototype.generateAfter = function() {
      return this.foundPartials = {};
    };

    return PartialsPlugin;

  })(BasePlugin);
};
