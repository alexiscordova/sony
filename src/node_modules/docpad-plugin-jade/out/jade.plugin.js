// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var JadePlugin;
  return JadePlugin = (function(_super) {

    __extends(JadePlugin, _super);

    function JadePlugin() {
      return JadePlugin.__super__.constructor.apply(this, arguments);
    }

    JadePlugin.prototype.name = 'jade';

    JadePlugin.prototype.config = {
      jadeOptions: {
        pretty: false
      },
      environments: {
        development: {
          jadeOptions: {
            pretty: true
          }
        }
      }
    };

    JadePlugin.prototype.render = function(opts, next) {
      var config, file, inExtension, jade, jadeOptions, key, templateData, value, _ref;
      inExtension = opts.inExtension, templateData = opts.templateData, file = opts.file;
      config = this.config;
      if (inExtension === 'jade') {
        jade = require('jade');
        jadeOptions = {
          filename: file.get('fullPath')
        };
        if (config.jadeOptions) {
          _ref = config.jadeOptions;
          for (key in _ref) {
            if (!__hasProp.call(_ref, key)) continue;
            value = _ref[key];
            jadeOptions[key] = value;
          }
        }
        try {
          opts.content = jade.compile(opts.content, jadeOptions)(templateData);
        } catch (err) {
          return next(err);
        }
      }
      return next();
    };

    return JadePlugin;

  })(BasePlugin);
};
